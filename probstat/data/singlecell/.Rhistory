source('~/lec/2015/sciencecamp/script/leafvein_160124.R')
source("/Users/hkiryu/lec/2015/sciencecamp/script/leafvein_160124.R",chdir=T);Leafvein.main()
source('~/lec/2015/sciencecamp/script/leafvein_160124.R')
source("/Users/hkiryu/lec/2015/sciencecamp/script/leafvein_160124.R",chdir=T);Leafvein.main()
source('~/lec/2015/sciencecamp/script/leafvein_160124.R')
source("/Users/hkiryu/lec/2015/sciencecamp/script/leafvein_160124.R",chdir=T);Leafvein.main()
source('~/lec/2015/sciencecamp/script/leafvein_160124.R')
source('~/lec/2015/sciencecamp/script/leafvein_160124.R')
source("/Users/hkiryu/lec/2015/sciencecamp/script/leafvein_160124.R",chdir=T);Leafvein.main()
source('~/lec/2015/sciencecamp/script/leafvein_160124.R')
source('~/lec/2015/sciencecamp/script/leafvein_160124.R')
source('~/lec/2015/sciencecamp/script/leafvein_160124.R')
source('~/lec/2015/sciencecamp/script/leafvein_160124.R')
source('~/lec/2015/sciencecamp/script/leafvein_160124.R')
source("/Users/hkiryu/lec/2015/sciencecamp/script/leafvein_160124.R",chdir=T);Leafvein.main()
source('~/lec/2015/sciencecamp/script/leafvein_160124.R')
source("/Users/hkiryu/lec/2015/sciencecamp/script/leafvein_160124.R",chdir=T);Leafvein.main()
source('~/lec/2015/sciencecamp/script/leafvein_160124.R')
source("/Users/hkiryu/lec/2015/sciencecamp/script/leafvein_160124.R",chdir=T);Leafvein.main()
source('~/lec/2015/sciencecamp/script/leafvein_160124.R')
source("/Users/hkiryu/lec/2015/sciencecamp/script/leafvein_160124.R",chdir=T);Leafvein.main()
source('~/lec/2015/sciencecamp/script/leafvein_160124.R')
source("/Users/hkiryu/lec/2015/sciencecamp/script/leafvein_160124.R",chdir=T);Leafvein.main()
source('~/lec/2015/sciencecamp/script/leafvein_160124.R')
source('~/lec/2015/sciencecamp/script/leafvein_160124.R')
source("/Users/hkiryu/lec/2015/sciencecamp/script/leafvein_160124.R",chdir=T);Leafvein.main()
source('~/lec/2015/sciencecamp/script/leafvein_160124.R')
source("/Users/hkiryu/lec/2015/sciencecamp/script/leafvein_160124.R",chdir=T);Leafvein.main()
source('~/lec/2015/sciencecamp/script/leafvein_160124.R')
source('~/lec/2015/sciencecamp/script/leafvein_160124.R')
source("/Users/hkiryu/lec/2015/sciencecamp/script/leafvein_160124.R",chdir=T);Leafvein.main()
source('~/lec/2015/sciencecamp/script/leafvein_160124.R')
source("/Users/hkiryu/lec/2015/sciencecamp/script/leafvein_160124.R",chdir=T);Leafvein.main()
source('~/lec/2015/sciencecamp/script/leafvein_160124.R')
source("/Users/hkiryu/lec/2015/sciencecamp/script/leafvein_160124.R",chdir=T);Leafvein.main()
source('~/lec/2015/sciencecamp/script/leafvein_160124.R')
source("/Users/hkiryu/lec/2015/sciencecamp/script/leafvein_160124.R",chdir=T);Leafvein.main()
source('~/lec/2015/sciencecamp/script/leafvein_160124.R')
source("/Users/hkiryu/lec/2015/sciencecamp/script/leafvein_160124.R",chdir=T);Leafvein.main()
source('~/lec/2015/sciencecamp/script/leafvein_160124.R')
source('~/lec/2015/sciencecamp/script/leafvein_160124.R')
source('~/lec/2015/sciencecamp/script/leafvein_160124.R')
source("/Users/hkiryu/lec/2015/sciencecamp/script/leafvein_160124.R",chdir=T);Leafvein.main()
source('~/lec/2015/sciencecamp/script/leafvein_160124.R')
source("/Users/hkiryu/lec/2015/sciencecamp/script/leafvein_160124.R",chdir=T);Leafvein.main()
source('~/lec/2015/sciencecamp/script/leafvein_160124.R')
source('~/lec/2015/sciencecamp/script/leafvein_160124.R')
source("/Users/hkiryu/lec/2015/sciencecamp/script/leafvein_160124.R",chdir=T);Leafvein.main()
a <- c(1, 2)
names(a) <- c("3", "4")
a
a[[3]]
a[["3"]]
a$3
a$"3"
a[["5"]] <- 6
a
a[[as.charactor(3)]]
a[[as.character(3)]]
a
a[["a"]]
a <- list()
a["a"]
a["a"] <- a["a"] + 1
if (a[["a"]]) { str("y")} else { str("n")}
if (!is.null(a[["a"]]) { str("y")} else { str("n")}
if (!is.null(a[["a"]])) { str("y")} else { str("n")}
as.character(-100:100)
grep("^[ACGT]-\\.$", c("A-.", "T>C"))
v <- c(rep(1, 3), rep(0, 3))
v
sample(v, 4)
sample(v, 4)
sum(sample(v, 4))
sum(sample(v, 4))
sum(sample(v, 4))
sum(sample(v, 4))
sum(sample(v, 4))
sum(sample(v, 4))
sum(sample(v, 4))
x <- seq(-2.0, 2.0, by=0.5)
x
trunc(x)
round(x)
x <- -200:200
x
round(x / 10)
10 * round(x / 10)
round(10 * round(x / 9.999))
10 * (-10:10)
unique(c(1,2,3,2))
source('~/regnase/script/read_stat1.r')
source('~/regnase/script/read_stat1.r')
source('~/regnase/script/read_stat1.r')
x <- 1:10
y <- x + rnorm(10)
delta <- runif(10)
errbar( x, y, y + delta, y - delta )
intall.packages("Hmisc")
install.packages("Hmisc")
install.packages("Hmisc")
install.packages("Hmisc")
install.packages("Hmisc")
source('~/regnase/script/read_stat1.r')
rep(0, 0)
rep(0, -1)
a <- c(1)
a
names(a) <- "a"
a
c(a, a)
seq(-100, 100, by=50)
warnings()
c(1, 10, 15, 20) %in% c(10, 15)
order(c(1,3,5, 2))
order(c(1,3,5,2))
a <- matrix(0:4, nrow=2)
a <- matrix(1:4, nrow=2)
a
order(a[1,])
a[1,]
colnames(a) <- c("a", "b")
a
a[,c(2,1)]
rbind(c(1,2), c(3,4))
rep(c("a", "b"), 3)
source('~/regnase/script/read_stat.r')
source('~/regnase/script/read_stat.r')
source('~/regnase/script/read_stat.r')
source('~/regnase/script/read_stat.r')
source('~/regnase/script/read_stat.r')
source('~/regnase/script/read_stat.r')
source('~/regnase/script/read_stat.r')
source('~/regnase/script/read_stat.r')
a <- matrix(1:4, nrow=2)
a
names(a)[2] <- "a"
a
colnames(a)[2] <- "a"
a
source('~/regnase/script/read_stat.r')
source('~/regnase/script/read_stat.r')
install.packages("R1magic")
install.packages("sound")
install.packages("tuneR")
source("https://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("cummeRbund")
source('~/neat1/script/trap_compare.r')
source('~/neat1/script/trap_compare.r')
source('~/neat1/script/trap_compare.r')
source('~/neat1/script/trap_compare.r')
source('~/neat1/script/trap_compare.r')
source('~/neat1/script/trap_compare.r')
source('~/neat1/script/trap_compare.r')
source('~/neat1/script/trap_compare.r')
source('~/neat1/script/trap_compare.r')
source('~/neat1/script/trap_compare.r')
source('~/neat1/script/trap_compare.r')
source('~/neat1/script/trap_compare.r')
source('~/neat1/script/trap_compare.r')
source('~/neat1/script/trap_compare.r')
source('~/neat1/script/trap_compare.r')
source('~/neat1/script/trap_compare.r')
source('~/neat1/script/trap_compare.r')
source('~/neat1/script/trap_compare.r')
source('~/neat1/script/trap_compare.r')
source('~/neat1/script/trap_compare.r')
source('~/neat1/script/trap_compare.r')
source('~/neat1/script/trap_compare.r')
source('~/neat1/script/trap_compare.r')
source('~/neat1/script/trap_compare.r')
source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("Upgrade")
biocLite("UpgradeBioc")
source("http://bioconductor.org/biocLite.R")
?biocLite
biocLite("topGO")
library(topGO)
library(ALL)
install.packages("ALL")
biocLite("ALL")
library(ALL)
data(ALL)
data(geneList)
affyLib <- paste(annotation(ALL), "db", sep=".")
library(package=affyLib, character.only=T)
biocLite('hgu95av2')
library(package=affyLib, character.only=T)
biocLite('hgu95av2.db')
sum(topDiffGenes(geneList))
geneList
sampleGOdata <- new("topGOdata",)
sampleGOdata <- new("topGOdata", description="Simple session", ontology="BP", allGenes=geneList, geneSel=topDiffGenes, nodeSize=10, annot=annFUN.db, affyLib=affyLib)
resultFisher <- runTest(sampleGOdata, algorithm="classic", statistic="fisher")
resultFisher
resultKS <- runTest(sampleGOdata, algorithm="classic", statistic="ks")
resultKS.elim <- runTest(sampleGOdata, algorithm="elim", statistic="ks")
resultKS.elim
str(resultKS.elim)
allRes <- GenTable(sampleGOdata, classicFisher=resultFisher, classicKS=resultKS, elimKS=resultKS.elim, orderBy="elimKS", ranksOf="classicFisher", topNodes=10)
allRes
install.packages("pheatmap")
library(DESeq2)
source('~/neat1/script/trap_compare.r')
source('~/neat1/script/trap_compare.r')
source('~/neat1/script/trap_compare.r')
source('~/neat1/script/trap_compare.r')
source('~/neat1/script/trap_compare.r')
library(topGO)
rev(c(1, 2, 3))
reverse(c(1, 2, 3))
a <- c(1, 2, 3)
names(a) <- c("A", "B", "C")
a
rev(a)
.jmethods(sheet)
library(xlsx)
wb <- createWorkbook()
.jmethods(wb)
sh <- createSheet(wb, sheetName="abcdefghijklmnopqrstuvwxyz")
sh
.jmethods(sh)
getSheetName(sh)
getName(sh)
str(sh)
sh$getSheetName()
sh <- createSheet(wb, sheetName="abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz")
sh$getSheetName()
install.packages("VennDiagram")
libraray(yaml)
install.packages('yaml')
library(yaml)
as.yaml(list(a=list(b=1)))
as.yaml(list(a=list(b=1), d=c(1, 2, 3)))
yaml.load("a:\n  b: 1.0\nd:\n- 1.0\n- 2.0\n- 3.0\n")
as.yaml(1)
yaml.load("1")
str(yaml.load("1\n...\n"))
str(yaml.load("---\n:a:\n  :b: 1\n:d:\n- 2\n- 3\n- 4\n"))
str(yaml.load("---\na:\n  b: 1\n'1':\n- e: :f\n- 3\n- 4\n" ))
a <- list()
a <- append(a, list(list(1)))
a
df <- data.frame(id=c("af1", "af2"), start=c(100, 115), end=c(114,121))
library(plyr)
lapply(df,1,as.list)
dlply(df,1,c)
dlply(df,.(id),c)
lapply(df, as.list)
apply(df, 1, as.list)
lapply(df, 1:nrow(df), funtion(i) {as.list(df[i,])})
lapply(df, 1:nrow(df), function(i) {as.list(df[i,])})
lapply(1:nrow(df), function(i) {as.list(df[i,])})
as.list(data.frame(x=numeric()))
class(data.frame(x=1))
as.yaml(data.frame(x=c(1, 2), y=c("b", "c")))
yaml.load("x:\n- 1.0\n- 2.0\n'y':\n- b\n- c\n")
as.yaml(T)
yaml.load("yes")
yaml.load("true")
foo <- list(a = 1, b = list(c = "a", d = FALSE))
bar <- modifyList(foo, list(e = 2, b = list(d = TRUE)))
str(foo)
str(bar)
list(a=1, a=2)[["a"]]
modifyList(list(a=1, a=2), list(a=3, b=list(c=4)))
modifyList(list(a=1, a=2), list(a=3, a=4, b=list(c=4)))
modifyList(list(a=1, a=2), list(a=3, a=5, b=list(c=4)))
strstplit("a.b.c", ".", fixed=T)
strsplit("a.b.c", ".", fixed=T)
opt <- list()
opt[[c("a", "b", "c")]] <- 1
(a <- 1)
k <- c("a", "b", "c")
opt <- list()
h <- opt; for (j in 1:k) { if (j < k) { h <- (h[[k[[j]]]] <- list())} else { h[[k[[j]]]] <- 1}}
h <- opt; for (j in 1:3) { if (j < 3) { h <- (h[[k[[j]]]] <- list())} else { h[[k[[j]]]] <- 1}}
h
opt
k <- c("a", "b", "c")
n <- length(k); h <- setNames(list(1), k[[n]]); for (i in (n - 1):1) { h <- setNames(list(h), k[[i]])}; h
Sys.time() - Sys.time()
as.yaml(Sys.time())
YAML.load("1.4664273e+09\n...\n")
yaml.load("1.4664273e+09\n...\n")
str(Sys.time())
as.character(Sys.time())
as.POSIXct(as.character(Sys.time()))
a <- Sys.time()
str(a)
Sys.time() - b
Sys.time() - a
as.numeric(Sys.time() - a)
NULL || 1
y <- list(); f <- function(x) { eval.parent(substitute(y$a <- 1))}; f(y); y
z <- list(); f <- function(x) { eval.parent(substitute(x$a <- 1))}; f(z); z
y <- list(); f <- function(x, v) { eval.parent(substitute(x <- v), n=2)}; g <- function(w, u) { f(w$a, u)}; g(y); y
y <- list(); f <- function(x, v) { eval.parent(substitute(x <- v), n=2)}; g <- function(w) { f(w$a, 5)}; g(y); y
a <- c(1, 2, 3)
names(a) <- c("x", "y", "z")
a$x
a[["x"]]
library(ggplot2)
install.packages('randomForest')
install.packages('e1071')
libraray(randomForest)
library(randomForest)
library(e1071)
library(rpart)
library(randomForest)
data(fgl, package="MASS")
fgl
fgl.res <- tuneRF(fgl[,-10], fgl[,10], stepFactor=1.5)
fgl.res
fgl.res <- tuneRF(fgl[,-10], fgl[,10], stepFactor=1.5, doBest=T)
fgl.res
fgl.res <- randomForest(fgl[,-10], fgl[,10], mtry=2, importance=T)
fgl.res
fgl.res$importance
source('~/neat1/script/test_random_forest.r')
library(yaml)
yaml.load("['a', 'b']: 1")
source('~/neat1/script/optimize_feature.r')
source('~/neat1/script/optimize_feature.r')
source('~/neat1/script/optimize_feature.r')
source('~/neat1/script/optimize_feature.r')
source('~/neat1/script/optimize_feature.r')
source('~/neat1/script/optimize_feature.r')
source('~/neat1/script/optimize_feature.r')
source('~/neat1/script/optimize_feature.r')
source('~/neat1/script/optimize_feature.r')
source('~/neat1/script/optimize_feature.r')
source('~/neat1/script/optimize_feature.r')
source('~/neat1/script/optimize_feature.r')
source('~/neat1/script/optimize_feature.r')
source('~/neat1/script/optimize_feature.r')
source('~/neat1/script/optimize_feature.r')
source('~/neat1/script/optimize_feature.r')
source('~/neat1/script/optimize_feature.r')
source('~/neat1/script/optimize_feature.r')
source('~/neat1/script/optimize_feature.r')
source('~/neat1/script/optimize_feature.r')
source('~/neat1/script/optimize_feature.r')
source('~/neat1/script/optimize_feature.r')
source('~/neat1/script/optimize_feature.r')
require(devtools)
install.packages('devtools')
require(devtools)
devtools::install_github('hms-dbmi/spp', build_vignettes = FALSE)
library(xlsx)
requireNamespace('FIT')
train.attribute.file <- system.file('extdata', 'train.attribute', package='FIT')
train.weather.file <- system.file('extdata', 'train.weather', package='FIT')
train.expression.file <- system.file('extdata', 'train.expression', package='FIT')
training.weather    <- FIT::load.weather(train.weather.file, 'weather',
c('temperature', 'radiation'))
training.expression <- FIT::load.expression(train.expression.file, 'ex',
c('Os12g0189300', 'Os02g0724000', 'Os02g0139700', 'Os06g0133200'))
grid.coords <- list(
env.temperature.threshold = c(10, 15, 20, 25, 30),
env.temperature.amplitude = c(-100/30, -1/30, 1/30, 100/30),
env.radiation.threshold = c(1, 10, 20, 30, 40),
env.radiation.amplitude = c(-100/80, -1/80, 1/80, 100/80),
env.temperature.period = c(10, 30, 90, 270, 720, 1440, 1440*3),
env.radiation.period = c(10, 30, 90, 270, 720, 1440, 1440*3),
gate.temperature.phase = seq(0, 23*60, 1*60),
gate.radiation.phase = seq(0, 23*60, 1*60),
gate.temperature.threshold = cos(pi*seq(4,24,4)/24),
gate.radiation.threshold = cos(pi*seq(4,24,4)/24),
gate.temperature.amplitude = c(-5, 5),
gate.radiation.amplitude = c(-5, 5)
)
recipe <- FIT::make.recipe(c('temperature', 'radiation'),
init = 'gridsearch',
optim = c('lm'),
fit = 'fit.lasso',
init.data = grid.coords,
time.step = 1)
models <- FIT::train(training.expression,
training.attribute,
training.weather,
recipe)
training.attribute  <- FIT::load.attribute(train.attribute.file);
models <- FIT::train(training.expression,
training.attribute,
training.weather,
recipe)
training.weather    <- FIT::load.weather(train.weather.file, 'weather',
c('temperature', 'radiation'))
models <- FIT::train(training.expression,
training.attribute,
training.weather,
recipe)
grid.coords <- list(
+     env.temperature.threshold = c(10, 15, 20, 25, 30),
+     env.temperature.amplitude = c(-100/30, -1/30, 1/30, 100/30),
+     env.radiation.threshold = c(1, 10, 20, 30, 40),
+     env.radiation.amplitude = c(-100/80, -1/80, 1/80, 100/80),
+     env.temperature.period = c(10, 30, 90, 270, 720, 1440, 1440*3),
+     env.radiation.period = c(10, 30, 90, 270, 720, 1440, 1440*3),
+     gate.temperature.phase = seq(0, 23*60, 1*60),
+     gate.radiation.phase = seq(0, 23*60, 1*60),
+     gate.temperature.threshold = cos(pi*seq(4,24,4)/24),
+     gate.radiation.threshold = cos(pi*seq(4,24,4)/24),
+     gate.temperature.amplitude = c(-5, 5),
+     gate.radiation.amplitude = c(-5, 5)
+ )
install.packages('FIT')
install.packages("FIT")
requireNamespace('FIT')
train.attribute.file <- system.file('extdata', 'train.attribute', package='FIT')
train.weather.file <- system.file('extdata', 'train.weather', package='FIT')
train.expression.file <- system.file('extdata', 'train.expression', package='FIT')
training.attribute  <- FIT::load.attribute(train.attribute.file);
training.weather    <- FIT::load.weather(train.weather.file, 'weather',
c('temperature', 'radiation'))
training.expression <- FIT::load.expression(train.expression.file, 'ex',
c('Os12g0189300', 'Os02g0724000', 'Os02g0139700', 'Os06g0133200'))
grid.coords <- list(
env.temperature.threshold = c(10, 15, 20, 25, 30),
env.temperature.amplitude = c(-100/30, -1/30, 1/30, 100/30),
env.radiation.threshold = c(1, 10, 20, 30, 40),
env.radiation.amplitude = c(-100/80, -1/80, 1/80, 100/80),
env.temperature.period = c(10, 30, 90, 270, 720, 1440, 1440*3),
env.radiation.period = c(10, 30, 90, 270, 720, 1440, 1440*3),
gate.temperature.phase = seq(0, 23*60, 1*60),
gate.radiation.phase = seq(0, 23*60, 1*60),
gate.temperature.threshold = cos(pi*seq(4,24,4)/24),
gate.radiation.threshold = cos(pi*seq(4,24,4)/24),
gate.temperature.amplitude = c(-5, 5),
gate.radiation.amplitude = c(-5, 5)
)
recipe <- FIT::make.recipe(c('temperature', 'radiation'),
init = 'gridsearch',
optim = c('lm'),
fit = 'fit.lasso',
init.data = grid.coords,
time.step = 1)
models <- FIT::train(training.expression,
training.attribute,
training.weather,
recipe)
install.packages('FIT')
install.packages("FIT")
requireNamespace('FIT')
train.attribute.file <- system.file('extdata', 'train.attribute', package='FIT')
train.weather.file <- system.file('extdata', 'train.weather', package='FIT')
train.expression.file <- system.file('extdata', 'train.expression', package='FIT')
training.attribute  <- FIT::load.attribute(train.attribute.file);
training.weather    <- FIT::load.weather(train.weather.file, 'weather',
c('temperature', 'radiation'))
training.expression <- FIT::load.expression(train.expression.file, 'ex',
c('Os12g0189300', 'Os02g0724000', 'Os02g0139700', 'Os06g0133200'))
grid.coords <- list(
env.temperature.threshold = c(10, 15, 20, 25, 30),
env.temperature.amplitude = c(-100/30, -1/30, 1/30, 100/30),
env.radiation.threshold = c(1, 10, 20, 30, 40),
env.radiation.amplitude = c(-100/80, -1/80, 1/80, 100/80),
env.temperature.period = c(10, 30, 90, 270, 720, 1440, 1440*3),
env.radiation.period = c(10, 30, 90, 270, 720, 1440, 1440*3),
gate.temperature.phase = seq(0, 23*60, 1*60),
gate.radiation.phase = seq(0, 23*60, 1*60),
gate.temperature.threshold = cos(pi*seq(4,24,4)/24),
gate.radiation.threshold = cos(pi*seq(4,24,4)/24),
gate.temperature.amplitude = c(-5, 5),
gate.radiation.amplitude = c(-5, 5)
)
recipe <- FIT::make.recipe(c('temperature', 'radiation'),
init = 'gridsearch',
optim = c('lm'),
fit = 'fit.lasso',
init.data = grid.coords,
time.step = 1)
models <- FIT::train(training.expression,
training.attribute,
training.weather,
recipe)
order(c(1,3,2), decreasing=T)
pmax(c(1,NA), c(NA, 2), na.rm=T)
a <- spline(c(1,2,3),c(1,3,2))
warnings()
a
x <- 1:10
y <- dhyper(x, 5, 5, 6)
plot(x, y)
par(new=T)y1 <- dbinom(x, 10, 0.5)
par(new=T)
y1 <- dbinom(x, 10, 0.5)
plot(x, y1)
y1 <- dbinom(x, 6, 0.5)
plot(x, y)
par(new=T)
y1 <- dbinom(x, 6, 0.5)
plot(x, y1, xlim=c(0, 10))
plot(x, y, xlim=c(0, 10))
par(new=T)
y1 <- dbinom(x, 6, 0.5)
plot(x, y1, xlim=c(0, 10))
plot(x, y, xlim=c(0, 10))
par(new=T)
plot(x, y1, xlim=c(0, 10), col="red")
plot(x, y, xlim=c(0, 10))
plot(x, y1, xlim=c(0, 10), col="red")
setwd('/Users/hkiryu/lec/2016/bioinfo_exercise/bioinfo_exercise_2016_2/singlecell/')
a <- read.table('time.txt')
a
a[, 2] <- a[, 2] / max(a[, 2])
a
write.table('time_normalized.txt', row.names=F, col.names=F, sep='\t')
write.table(a, 'time_normalized.txt', row.names=F, col.names=F, sep='\t')
